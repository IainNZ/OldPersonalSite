<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>IainDunning.com</title>
		<description>Experiences, thoughts, and technical notes.</description>		
		<link>http://iaindunning.com</link>
		<atom:link href="http://iaindunning.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>MetadataTools.jl</title>
				<description>
					&lt;p&gt;This is my first attempt at turning an &lt;a href=&quot;https://github.com/JuliaLang/IJulia.jl&quot;&gt;IJulia Notebook&lt;/a&gt; into a blog post. I gave a lightning talk at the &lt;a href=&quot;http://www.meetup.com/julia-cajun/&quot;&gt;Cambridge Area Julia Users Group (CAJUN)&lt;/a&gt; on Sept. 4th 2014 about some fun things you can do with &lt;a href=&quot;https://github.com/IainNZ/MetadataTools.jl&quot;&gt;MetadataTools.jl&lt;/a&gt; and used the following notebook as my &amp;quot;slides&amp;quot;. Here is that notebook, converted to Markdown for my site. It works fairly well, although I&amp;#39;ve had to a little bit of manual editing to make it look correct.&lt;/p&gt;

&lt;h2&gt;MetadataTools.jl Demo&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;using MetadataTools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Getting information about packages&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;MetadataTools&lt;/code&gt; defines a &lt;code&gt;PkgMeta&lt;/code&gt; type that represents a package&amp;#39;s METADATA entry, and contains a &lt;code&gt;PkgMetaVersion&lt;/code&gt; for each tagged version.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pkgs = get_all_pkg()  # Returns a Dict{String,PkgMeta}
pkgs[&amp;quot;DataArrays&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;DataArrays   git://github.com/JuliaStats/DataArrays.jl.git
  0.0.0,a6ce00,julia 0.2-,StatsBase 0.2.5 0.3-,SortingAlgorithms
  0.0.1,0001ff,julia 0.2-,StatsBase 0.2.5 0.3-,SortingAlgorithms
  0.0.2,7a61d2,julia 0.2-,StatsBase 0.2.5 0.3-,SortingAlgorithms
  0.0.3,613ca1,julia 0.2- 0.3-,StatsBase 0.3.8-
  0.1.0,ae7d82,julia 0.3-,StatsBase 0.3-,SortingAlgorithms
  0.1.1,3fe861,julia 0.3-,StatsBase 0.3
  0.1.2,d0a0b3,julia 0.3-,StatsBase 0.3
  0.1.3,d9ad97,julia 0.3-,StatsBase 0.3
  0.1.4,4742f2,julia 0.3.0-prerelease+1942,StatsBase 0.3
  0.1.5,833e53,julia 0.3.0-,StatsBase 0.3
  0.1.6,4be6c8,julia 0.3.0-,StatsBase 0.3
  0.1.7,fc8a8a,julia 0.3.0-,StatsBase 0.3
  0.1.8,511e2c,julia 0.3.0-,StatsBase 0.3
  0.1.9,9c281b,julia 0.3.0-,StatsBase 0.3
  0.1.10,440fb0,julia 0.3.0-,StatsBase 0.3
  0.1.11,623147,julia 0.3.0-,StatsBase 0.3
  0.1.12,e0e4a7,julia 0.3.0-,StatsBase 0.3
  0.2.0,d78a6d,julia 0.3.0-,StatsBase 0.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can check that maximum supported Julia version using &lt;code&gt;get_upper_limit&lt;/code&gt; - useful for checking if a package is deprecated.&lt;/p&gt;

&lt;p&gt;Input:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;get_upper_limit(get_pkg(&amp;quot;Monads&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;v&amp;quot;0.3.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;get_upper_limit(get_pkg(&amp;quot;DataFrames&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;v&amp;quot;0.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also request information about a package from GitHub (or wherever it is hosted - only GitHub needed right now!)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gadfly_info = get_pkg_info(get_pkg(&amp;quot;Gadfly&amp;quot;))
Base.isless(a::MetadataTools.Contributor,b::MetadataTools.Contributor) =
    isless(a.username,b.username)
sort(gadfly_info.contributors, rev=true)[1:10]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;10-element Array{(Int64,Contributor),1}:
 (428,Contributor(&amp;quot;dcjones&amp;quot;,&amp;quot;https://github.com/dcjones&amp;quot;))        
 (8,Contributor(&amp;quot;dchudz&amp;quot;,&amp;quot;https://github.com/dchudz&amp;quot;))            
 (7,Contributor(&amp;quot;darwindarak&amp;quot;,&amp;quot;https://github.com/darwindarak&amp;quot;))  
 (6,Contributor(&amp;quot;timholy&amp;quot;,&amp;quot;https://github.com/timholy&amp;quot;))          
 (5,Contributor(&amp;quot;kleinschmidt&amp;quot;,&amp;quot;https://github.com/kleinschmidt&amp;quot;))
 (5,Contributor(&amp;quot;aviks&amp;quot;,&amp;quot;https://github.com/aviks&amp;quot;))              
 (5,Contributor(&amp;quot;Keno&amp;quot;,&amp;quot;https://github.com/Keno&amp;quot;))                
 (4,Contributor(&amp;quot;jverzani&amp;quot;,&amp;quot;https://github.com/jverzani&amp;quot;))        
 (4,Contributor(&amp;quot;inq&amp;quot;,&amp;quot;https://github.com/inq&amp;quot;))                  
 (4,Contributor(&amp;quot;IainNZ&amp;quot;,&amp;quot;https://github.com/IainNZ&amp;quot;))            
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I pulled all the data about a week ago and serialized it for later use.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;f = open(&amp;quot;metadata.jldata&amp;quot;,&amp;quot;r&amp;quot;)
pkg_info = deserialize(f)
close(f)
pkg_info[&amp;quot;Dates&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;PkgInfo(&amp;quot;https://github.com/quinnj/Dates.jl&amp;quot;,&amp;quot;Date/DateTime Implementation for the Julia Language; Successor to Datetime.jl&amp;quot;,&amp;quot;&amp;quot;,5,2,[(2,Contributor(&amp;quot;jiahao&amp;quot;,&amp;quot;https://github.com/jiahao&amp;quot;)),(131,Contributor(&amp;quot;quinnj&amp;quot;,&amp;quot;https://github.com/quinnj&amp;quot;))])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Calculate commits stats
total_coms = Dict()
total_pkgs = Dict()

for pkg in values(pkg_info)
    for contrib in pkg.contributors
        commits, c = contrib
        total_coms[c.username] = get(total_coms,c.username,0) + commits
        total_pkgs[c.username] = get(total_pkgs,c.username,0) + 1
    end
end

# Turn dicts into sorted (num,username) vectors
total_pkgs = sort([(total_pkgs[n],n) for n in keys(total_pkgs)],rev=true)
total_coms = sort([(total_coms[n],n) for n in keys(total_coms)],rev=true)

println(&amp;quot;Number of packages contributed to&amp;quot;)
map(println, total_pkgs[1:20])

println(&amp;quot;Number of commits across all packages&amp;quot;)
map(println, total_coms[1:20]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Number of packages contributed to
(51,&amp;quot;timholy&amp;quot;)
(45,&amp;quot;johnmyleswhite&amp;quot;)
(40,&amp;quot;kmsquire&amp;quot;)
(37,&amp;quot;StefanKarpinski&amp;quot;)
(35,&amp;quot;Keno&amp;quot;)
(34,&amp;quot;lindahua&amp;quot;)
(30,&amp;quot;simonster&amp;quot;)
(29,&amp;quot;IainNZ&amp;quot;)
(25,&amp;quot;mlubin&amp;quot;)
(24,&amp;quot;staticfloat&amp;quot;)
(24,&amp;quot;aviks&amp;quot;)
(21,&amp;quot;vtjnash&amp;quot;)
(20,&amp;quot;stevengj&amp;quot;)
(20,&amp;quot;ihnorton&amp;quot;)
(18,&amp;quot;quinnj&amp;quot;)
(17,&amp;quot;tanmaykm&amp;quot;)
(17,&amp;quot;dcjones&amp;quot;)
(17,&amp;quot;carlobaldassi&amp;quot;)
(16,&amp;quot;tkelman&amp;quot;)
(16,&amp;quot;powerdistribution&amp;quot;)

Number of commits across all packages
(1734,&amp;quot;lindahua&amp;quot;)
(1427,&amp;quot;jakebolewski&amp;quot;)
(1178,&amp;quot;timholy&amp;quot;)
(893,&amp;quot;johnmyleswhite&amp;quot;)
(821,&amp;quot;dcjones&amp;quot;)
(788,&amp;quot;simonster&amp;quot;)
(749,&amp;quot;mlubin&amp;quot;)
(678,&amp;quot;milktrader&amp;quot;)
(462,&amp;quot;stevengj&amp;quot;)
(435,&amp;quot;dmbates&amp;quot;)
(415,&amp;quot;nolta&amp;quot;)
(402,&amp;quot;one-more-minute&amp;quot;)
(398,&amp;quot;quinnj&amp;quot;)
(397,&amp;quot;IainNZ&amp;quot;)
(372,&amp;quot;joehuchette&amp;quot;)
(353,&amp;quot;powerdistribution&amp;quot;)
(350,&amp;quot;WestleyArgentum&amp;quot;)
(340,&amp;quot;Keno&amp;quot;)
(336,&amp;quot;scidom&amp;quot;)
(330,&amp;quot;tanmaykm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Package Ecosystem&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;MetadataTools&lt;/code&gt; has a dependency on &lt;code&gt;Graphs&lt;/code&gt; to enable an analysis of how
packages rely on each other.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;using Graphs
# Get a directed graph where PkgA -&amp;gt; PkgB iff 
# PkgA directly requires PkgB
g = get_pkgs_dep_graph(get_all_pkg())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Directed Graph (418 vertices, 496 edges)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;g_gadfly = get_pkg_dep_graph(get_pkg(&amp;quot;Gadfly&amp;quot;),g)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Directed Graph (24 vertices, 36 edges)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To plot the dependency graph for a package, we can use my GraphLayout.jl package which uses Compose.jl internally for drawing. I haven&amp;#39;t got around to adding Graphs.jl support to GraphLayout.jl just yet though...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;using GraphLayout
for pkg_name in [&amp;quot;Gadfly&amp;quot;,&amp;quot;QuantEcon&amp;quot;,&amp;quot;JuMP&amp;quot;,&amp;quot;Twitter&amp;quot;]
    # Extract graph
    g_pkg = get_pkg_dep_graph(get_pkg(pkg_name),g)
    # Extract adjacency matrix
    adj_mat = adjacency_matrix(g_pkg)
    # Build layout
    locs_x,locs_y = layout_spring_adj(adj_mat)
    # Extract name for each vertex
    vert_names = map(pm-&amp;gt;pm.name, vertices(g_pkg))
    # Draw as an SVG
    draw_layout_adj(adj_mat, locs_x, locs_y, labels=vert_names)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;photo&quot;&gt;&lt;img src=&quot;/images/metadatatools_16_0.svg&quot; alt=&quot;&quot;&gt;&lt;p class=&quot;caption&quot;&gt;&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;photo&quot;&gt;&lt;img src=&quot;/images/metadatatools_16_1.svg&quot; alt=&quot;&quot;&gt;&lt;p class=&quot;caption&quot;&gt;&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;photo&quot;&gt;&lt;img src=&quot;/images/metadatatools_16_2.svg&quot; alt=&quot;&quot;&gt;&lt;p class=&quot;caption&quot;&gt;&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;photo&quot;&gt;&lt;img src=&quot;/images/metadatatools_16_3.svg&quot; alt=&quot;&quot;&gt;&lt;p class=&quot;caption&quot;&gt;&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;We can also look at which packages depend on the most packages&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;num_pkg_req = [
    (num_vertices(get_pkg_dep_graph(pkg, g)), pkg.name)
        for pkg in values(pkgs)]
sort!(num_pkg_req, rev=true)  # Sort descending
println(&amp;quot;Top 10 packages by number of packages depended on:&amp;quot;)
for i in 1:10
    println(rpad(num_pkg_req[i][2],20,&amp;quot; &amp;quot;), num_pkg_req[i][1]-1)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Top 10 packages by number of packages depended on:
RobustStats         30
MachineLearning     30
Quandl              26
Twitter             25
Lumira              24
Gadfly              23
QuantEcon           22
ProfileView         22
ImageView           21
Etcd                21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also reverse the graph - now an arc from PkgA to PkgB means PkgB requires PkgA&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;g_rev = get_pkgs_dep_graph(pkgs, reverse=true)
# Count size of every subgraphs like above
num_pkg_req = [
    (num_vertices(get_pkg_dep_graph(pkg, g_rev)), pkg.name)
        for pkg in values(pkgs)]
sort!(num_pkg_req, rev=true)  # Sort descending
println(&amp;quot;Top 10 packages by number of packages that depend on them:&amp;quot;)
for i in 1:10
    println(rpad(num_pkg_req[i][2],20,&amp;quot; &amp;quot;), num_pkg_req[i][1]-1)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Top 10 packages by number of packages that depend on them:
URIParser           89
SHA                 88
BinDeps             87
ArrayViews          76
JSON                71
StatsBase           66
Homebrew            58
Zlib                49
URLParse            40
Reexport            40
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
					
				</description>
				<pubDate>Fri, 05 Sep 2014 08:00:00 -0400</pubDate>
				<link>http://iaindunning.com/2014/metadatatools.html</link>
				<guid isPermaLink="true">http://iaindunning.com/2014/metadatatools.html</guid>
			</item>
		
			<item>
				<title>Julia Package Ecosystem Dependency Graphs</title>
				<description>
					&lt;p&gt;&lt;a href=&quot;http://julialang.org&quot;&gt;Julia&lt;/a&gt; is a relatively young programming language that is rising in popularity. I personally use it heavily in my work, and try to contribute back where I can. It has an &lt;a href=&quot;http://docs.julialang.org/en/release-0.2/manual/packages/&quot;&gt;in-built package manager&lt;/a&gt; that is mostly used to access packages from the central repository, &lt;a href=&quot;https://github.com/JuliaLang/METADATA.jl&quot;&gt;METADATA.jl&lt;/a&gt;, which contains a listing of packages and their dependencies. At the time of writing there were 363 packages available that are compatible with the Julia 0.3 release candidate.&lt;/p&gt;

&lt;p&gt;I recently wrote some code to analyze METADATA, available as part of &lt;a href=&quot;https://github.com/IainNZ/PackageEvaluator.jl&quot;&gt;PackageEval.jl&lt;/a&gt; (funnily enough, this package isn&amp;#39;t in METADATA). I have utilized that functionality to generate &lt;em&gt;dependency graphs&lt;/em&gt; for METADATA, where a directed link between two packages A and B means that package A depends on package B. Combining this with &lt;a href=&quot;https://github.com/IainNZ/GraphLayout.jl&quot;&gt;GraphLayout.jl&lt;/a&gt;, which does force-based graph layout in pure Julia, and &lt;a href=&quot;https://github.com/dcjones/Compose.jl&quot;&gt;Compose.jl&lt;/a&gt;, a declarative vector graphics library with multiple backends, enables us to make some interesting plots. I apologize in advance for the overlapping labels and nodes - the algorithm I&amp;#39;ve implemented in GraphLayout is still pretty basic and doesn&amp;#39;t do anything smart with labels or line avoidance.&lt;/p&gt;

&lt;p&gt;The obvious question is to determine which packages have the highest number of dependencies which we can find by determining the sizes of the connected component of packages reachable by starting from each package. It turns out that the package with the most dependencies is &lt;a href=&quot;https://github.com/milktrader/Quandl.jl&quot;&gt;Quandl.jl&lt;/a&gt; with 30. Interestingly, it only directly depends on five packages itself.&lt;/p&gt;

&lt;div class=&quot;photo&quot;&gt;&lt;img src=&quot;/images/Quandl.svg&quot; alt=&quot;Quandl.jl dependency graph&quot;&gt;&lt;p class=&quot;caption&quot;&gt;Quandl.jl dependency graph&lt;/p&gt;&lt;/div&gt;


					
						&lt;br&gt;&lt;a href=&quot;http://iaindunning.com/2014/pkg-deps.html&quot;&gt;Read more at iaindunning.com&lt;/a&gt;
					
				</description>
				<pubDate>Sun, 20 Jul 2014 08:00:00 -0400</pubDate>
				<link>http://iaindunning.com/2014/pkg-deps.html</link>
				<guid isPermaLink="true">http://iaindunning.com/2014/pkg-deps.html</guid>
			</item>
		
	</channel>
</rss>
